#textdomain wesnoth-The_Haunted_Woods
# Several abilities here are taken from the wiki other eras with slight modifications. Credits go to their respective authors.

# These events give the effects to a few of the dummy abilities down below

# This is for the charm weapon special

[event]
    name=attacker_hits
    first_time_only=no
    # Filters for the special
    [filter_attack]
        special=charm_thw
    [/filter_attack]
    # Makes sure opponent is male and cannot recruit
    [filter_second]
        gender=male
        canrecruit=no
    [/filter_second]

    {STORE_UNIT_VAR x,y=$x1,$y1 side charmer_side}
    {STORE_UNIT_VAR x,y=$x2,$y2 side charmed_side}

    {IF_VAR charmer_side not_equals $charmed_side (
        [then]
            # Modifies the units
            {MODIFY_UNIT x,y=$x2,$y2 variables.real_side $charmed_side}
            [floating_text]
                x,y=$x2,$y2
                text = "charmed"
            [/floating_text]
            {MODIFY_UNIT x,y=$x2,$y2 side $charmer_side}
            {MODIFY_UNIT x,y=$x2,$y2 moves 2}
            {MODIFY_UNIT x,y=$x2,$y2 attacks_left 1}

            {VARIABLE_OP varname format "side_$charmed_side|_units_charmed"}
            {VARIABLE $varname yes}

            {CLEAR_VARIABLE varname}
        [/then]
    )}

    {CLEAR_VARIABLE charmer_side}
    {CLEAR_VARIABLE charmed_side}
[/event]

# This code returns all charmed units back to their sides at the start of their turns
[event]
    name=side turn
    first_time_only=no

    {VARIABLE_OP this_side_charmed to_variable "side_$side_number|_units_charmed"}

    {IF_VAR this_side_charmed equals yes (
        [then]
            [store_unit]
                [filter]
                    [not]
                        side=$side_number
                    [/not]
                [/filter]

                variable=possibly_charmed
                kill=no
            [/store_unit]

            {FOREACH possibly_charmed i}
                {VARIABLE_OP real_side format "0$possibly_charmed[$i].variables.real_side"}

                {IF_VAR real_side not_equals "0" (
                    [then]
                        {IF_VAR side_number equals $possibly_charmed[$i].variables.real_side (
                            [then]
                                {CLEAR_VARIABLE possibly_charmed[$i].variables.real_side}
                                {VARIABLE possibly_charmed[$i].side $side_number}

                                [unstore_unit]
                                    variable=possibly_charmed[$i]
                                    find_vacant=no
                                    {COLOR_HEAL}
                                    text= _ "uncharmed"
                                [/unstore_unit]
                            [/then]
                        )}
                    [/then]
                )}
            {NEXT i}

            {CLEAR_VARIABLE possibly_charmed}
        [/then]
    )}
[/event]

# This is for the mind flay special

# Initializes variable
[event]
    name=attack
    first_time_only=no
    [filter_attack]
        special=mind_flay
    [/filter_attack]
    {VARIABLE hit_number 0}
[/event]
# Increases variable on each hit
[event]
    name=attacker_hits
    first_time_only=no
    [filter_attack]
        special=mind_flay
    [/filter_attack]
    {VARIABLE_OP hit_number add 1}
[/event]
# Transfers experience points
[event]
    name=attack_end
    first_time_only=no
    [filter_attack]
        special=mind_flay
    [/filter_attack]
    {VARIABLE_OP second_unit.experience add -$hit_number}
    {VARIABLE_OP unit.experience add $hit_number}
    [unstore_unit]
        variable=unit
        find_vacant=no
        text=$hit_number
        red=50
        green=50
        blue=220
    [/unstore_unit]
    [unstore_unit]
        variable=second_unit
        find_vacant=no
        text="-$hit_number"
        red=255
        blue=100
        green=100
    [/unstore_unit]
    {CLEAR_VARIABLE hit_number}
[/event]

# This is for the bloodlust special

[event]
    name=die
    first_time_only=no

    # Attack filter

    [filter_second_attack]
        range=melee
        special=bloodlust_thw
    [/filter_second_attack]

    # Applies effects

    {MODIFY_UNIT x,y=$x2,$y2 moves 1}
    [floating_text]
        x,y=$x2,$y2
        text = "bloodlust"
    [/floating_text]
    {MODIFY_UNIT x,y=$x2,$y2 attacks_left 1}
[/event]

# Knockback special by zookeeper

[event]
    name=attacker hits
    first_time_only=no

    [filter_attack]
        special=knockback_thw
    [/filter_attack]

    [filter_second]
        [not]
            [filter_location]
                terrain=*^V*
            [/filter_location]
        [/not]
    [/filter_second]

    [if]
        [variable]
            name=second_unit.hitpoints
            greater_than=0
        [/variable]

        [then]
            [if]
                [have_unit]
                    x,y=$x1,$y1
                    [filter_adjacent]
                        x,y=$x2,$y2
                        adjacent=n
                    [/filter_adjacent]
                [/have_unit]
                [then]
                    {VARIABLE knockback_direction n}
                [/then]
                [else]
                    [if]
                        [have_unit]
                            x,y=$x1,$y1
                            [filter_adjacent]
                                x,y=$x2,$y2
                                adjacent=ne
                            [/filter_adjacent]
                        [/have_unit]
                        [then]
                            {VARIABLE knockback_direction ne}
                        [/then]
                        [else]
                            [if]
                                [have_unit]
                                    x,y=$x1,$y1
                                    [filter_adjacent]
                                        x,y=$x2,$y2
                                        adjacent=se
                                    [/filter_adjacent]
                                [/have_unit]
                                [then]
                                    {VARIABLE knockback_direction se}
                                [/then]
                                [else]
                                    [if]
                                        [have_unit]
                                            x,y=$x1,$y1
                                            [filter_adjacent]
                                                x,y=$x2,$y2
                                                adjacent=s
                                            [/filter_adjacent]
                                        [/have_unit]
                                        [then]
                                            {VARIABLE knockback_direction s}
                                        [/then]
                                        [else]
                                            [if]
                                                [have_unit]
                                                    x,y=$x1,$y1
                                                    [filter_adjacent]
                                                        x,y=$x2,$y2
                                                        adjacent=sw
                                                    [/filter_adjacent]
                                                [/have_unit]
                                                [then]
                                                    {VARIABLE knockback_direction sw}
                                                [/then]
                                                [else]
                                                    [if]
                                                        [have_unit]
                                                            x,y=$x1,$y1
                                                            [filter_adjacent]
                                                                x,y=$x2,$y2
                                                                adjacent=nw
                                                            [/filter_adjacent]
                                                        [/have_unit]
                                                        [then]
                                                            {VARIABLE knockback_direction nw}
                                                        [/then]
                                                    [/if]
                                                [/else]
                                            [/if]
                                        [/else]
                                    [/if]
                                [/else]
                            [/if]
                        [/else]
                    [/if]
                [/else]
            [/if]

            [store_locations]
                [not]
                    [filter]
                    [/filter]
                [/not]

                [filter_adjacent_location]
                    x,y=$x2,$y2
                    adjacent=-$knockback_direction
                [/filter_adjacent_location]

                variable=knockback_target_hex
            [/store_locations]

            [if]
                [variable]
                    name=knockback_target_hex.length
                    greater_than=0
                [/variable]

                [then]
                    [teleport]
                        [filter]
                            x,y=$x2,$y2
                        [/filter]

                        x,y=$knockback_target_hex.x,$knockback_target_hex.y
                        ignore_passability=no
                    [/teleport]

                    [if]
                        [have_unit]
                            x,y=$knockback_target_hex.x,$knockback_target_hex.y
                        [/have_unit]

                        [then]
                            # the knockbacked unit doesn't seem to receive experience by default,
                            # so we need to add it manually
                            [store_unit]
                                [filter]
                                    x,y=$knockback_target_hex.x,$knockback_target_hex.y
                                [/filter]

                                kill=yes
                                variable=knockbacked
                            [/store_unit]

                            {VARIABLE_OP knockbacked.experience add $unit.level}

                            [unstore_unit]
                                variable=knockbacked
                                text= _ "knockback"
                                {COLOR_HARM}
                                advance=true
                            [/unstore_unit]

                            {CLEAR_VARIABLE knockbacked}
                        [/then]
                    [/if]
                [/then]
            [/if]

            {CLEAR_VARIABLE knockback_direction,knockback_target_hex}
        [/then]
    [/if]
[/event]

# This is for the hunts ability

[event]
    name=turn refresh
    first_time_only=no
    # Checks for ability and side number, as well as terrain
    [store_unit]
        [filter]
            ability=hunts_thw
            side=$side_number
            [filter_location]
                terrain=Ss*
            [/filter_location]
            [not]
                [filter_wml]
                    [variables]
                        given_this_turn=yes
                    [/variables]
                [/filter_wml]
            [/not]
        [/filter]
        variable=hunter
    [/store_unit]
    {FOREACH hunter x}
        # Scrolls to the unit
        [scroll_to]
            x=$hunter[$x].x
            y=$hunter[$x].y
        [/scroll_to]
        # Gives gold and experience and plays sound
        [gold]
            side=$side_number
            amount=5
        [/gold]
        {VARIABLE_OP hunter[$x].experience add 2}
        [sound]
            name=gold.ogg
        [/sound]
        # Floating text, keeps him from advancing
        [unstore_unit]
            red=50
            green=50
            blue=220
            text=_ "+5 gold"
            variable=hunter[$x]
            advance=false
        [/unstore_unit]
    {NEXT x}
    {CLEAR_VARIABLE hunter}
[/event]

# This is for the pickpocket special

[event]
    name=attacker_hits
    first_time_only=no
    # Filters for the special
    [filter_attack]
        special=pickpocket_thw
    [/filter_attack]
    # Transfers gold
    [gold]
        side=$side_number
        amount=3
    [/gold]
    [gold]
        side=$second_unit.side
        amount=-3
    [/gold]
    # Plays sound
    [sound]
        name=gold.ogg
    [/sound]
    # Floating text
    [floating_text]
        x,y=$x1,$y1
        text = "+2"
    [/floating_text]
[/event]

# For the possess special, but I'm not sure how I will implement this

[event]
    name=attacker_hits
    first_time_only=no
    [filter_attack]
        special=possess_thw
    [/filter_attack]

    # Filters for enemies that are not undead and cannot recruit

    [filter_second]
        not_living=no
        canrecruit=no
    [/filter_second]

    # Stores the attacker's and defender's side

    {STORE_UNIT_VAR x,y=$x1,$y1 side attack_side}
    {STORE_UNIT_VAR x,y=$x2,$y2 side defense_side}
    {MODIFY_UNIT x,y=$x2,$y2 side $attack_side}
    {MODIFY_UNIT x,y=$x2,$y2 moves 2}
    {MODIFY_UNIT x,y=$x2,$y2 attacks_left 1}

    # This stores the possessed unit's status as being possessed, and storing the possessor type

    {MODIFY_UNIT x,y=$x2,$y2 variables.possessed yes}
    {MODIFY_UNIT x,y=$x2,$y2 variables.original_side $defense_side}
    {MODIFY_UNIT x,y=$x2,$y2 variables.possessor $unit.type}

    # This puts floating text (like when a unit is hit or healed) on type of it in a blue color
    [floating_text]
        x,y=$x2,$y2
        text = "possessed"
    [/floating_text]

    # Plays a sound

    [sound]
        name=lich-die.ogg
    [/sound]

    # Kills the attacker

    [store_unit]
        [filter]
            x,y=$x1,$y1
        [/filter]
        kill=yes
        variable=stored_possessor
    [/store_unit]

    {CLEAR_VARIABLE attack_side}
    {CLEAR_VARIABLE defense_side}
[/event]

#define WEAPON_SPECIAL_MIND_FLAY
    [damage]
        id=mind_flay
        name="mind flay"
        description=_ "When used offensively, each hit of the mind flay attack takes 1 point of experience from the defender and gives it to the attacker."
        multiply=1
    [/damage]
#enddef

#define WEAPON_SPECIAL_CHARM
    [damage]
        id=charm_thw
        name="Charm"
        description=_ "When an enemy is hit with this attack, it instantly jumps to the attacker's side, and returns to it's original side at the beginning of that side's turn. A charmed unit has 2 movement points and can attack."
        multiply=1
    [/damage]
#enddef

#define WEAPON_SPECIAL_POSSESS
    [damage]
        id=possess_thw
        name="possess"
        description=_ "When this attack hits on offense, the attacker possesses the defender, in effect killing the attacker and converting the defender to the attacker's side permanently."
        multiply=1
    [/damage]
#enddef

#define WEAPON_SPECIAL_KNOCKBACK
    [damage]
        id=knockback_thw
        name="knockback"
        description=_ "On offense, the power of this attack can knock enemies back one hex and also ends combat, unless the enemy is stationed on a village."
        multiply=1
    [/damage]
#enddef

#define ABILITY_HUNTS_THW
    [dummy]
        id=hunts_thw
        name= _ "hunts"
        description= _ "Units with this ability hunt in swamp terrain, gaining 5 gold and 2 experience each turn begun on this type of terrain."
    [/dummy]
[/abilities]
[+abilities]
#enddef

#define WEAPON_SPECIAL_PICKPOCKET
    [damage]
        id=pickpocket_thw
        name="pickpocket"
        description=_ "When used offensively, this attack takes 3 gold from the defender and gives it to the attacker on every successful hit." 
        multiply=1
    [/damage]
#enddef

#define WEAPON_SPECIAL_BLOODLUST
    [damage]
        id=bloodlust_thw
        name= _ "bloodlust"
        description= _ "Whenever a unit kills an enemy with this attack, it will gain another movement point and the ability to attack again."
        multiply=1
    [/damage]
#enddef

# Here's the actual abilities

#define ABILITY_CAMO_THW
    # Canned definition of the Camoflauge ability to be included in an
    # [abilities] clause.
    [hides]
        id=camoflauge_thw
        name= _ "camoflauge"
        female_name= _ "female^camoflauge"
        description= _ "This unit can hide in hills, mountains, and caves and remain undetected by its enemies.

Enemy units cannot see or attack this unit when it is in hills or mountains, except for any turn immediately after this unit has attacked, if there are enemy units next to this unit, or if the caves are lit."
        name_inactive= _ "camoflauge"
        female_name_inactive= _ "female^camoflauge"
        description_inactive= _ "This unit can hide in hills, mountains, and caves and remain undetected by its enemies.

Enemy units cannot see or attack this unit when it is in hills or mountains, except for any turn immediately after this unit has attacked, if there are enemy units next to this unit, or if the caves are lit."
        affect_self=yes
        [filter_self]
            [filter_location]
                terrain=Hh*,Mm*,Ms*,Ma*,Uh,Hd,Md,Uu*,Ur,Uh,Qxu*,Ql*
            [/filter_location]
        [/filter_self]
    [/hides]
#enddef

#define WEAPON_SPECIAL_COUNTER
    [chance_to_hit]
        id=counter
        name= _ "counter"
        description= _ "Counter:
When used defensively, this attack always has at least a 80% chance to hit."
        name_inactive= _ "counter"
        description_inactive= _ "When used defensively, this attack always has at least a 80% chance to hit."
        value=80
        cumulative=yes
        active_on=defense
    [/chance_to_hit]
#enddef

#define ABILITY_ILLUMINATES_THW
    [illuminates]
        id=illuminates_thw
        value=25
        max_value=30
        cumulative=no
        name= _ "illuminates"
        description= _ "This unit can call upon light to dispell darkness in its vicinity, causing chaotic units to fight worse and lawful units to fight better"
        affect_self=yes
        affect_allies=yes
        affect_enemies=yes
    [/illuminates]
#enddef

#define ABILITY_BLESSED
    [leadership]
        id=blessed
        value=-30
        cumulative=no
        name= _ "blessed"
        female_name= _ "female^blessed"
        description= _ "This unit carries a sword of light, which weakens non-fearless undead around it by 30%."
        affect_self=no
        affect_enemies=yes
        [affect_adjacent]
            adjacent=n,ne,se,s,sw,nw
            [filter]
                race=undead
                [not]
                    type=Walking Corpse, Soulless, Ghoul, Necrophage
                [/not]
            [/filter]
        [/affect_adjacent]
    [/leadership]
#enddef
